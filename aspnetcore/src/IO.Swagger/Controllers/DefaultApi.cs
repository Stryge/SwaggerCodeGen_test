/*
 * Textual RPG engine
 *
 * This is an API for a textual base RPG engine
 *
 * OpenAPI spec version: 1.0.0
 * Contact: no@email.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// log to an account
        /// </summary>
        /// <remarks>Log into your account by providing the email and password.</remarks>
        /// <param name="body"></param>
        /// <response code="200">The user successfully login into his account</response>
        /// <response code="403">The authentication failed</response>
        [HttpPost]
        [Route("/Stryge/Textual_RPG_engine/1.0.0/login")]
        [ValidateModelState]
        [SwaggerOperation("LogIn")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "The authentication failed")]
        public virtual IActionResult LogIn([FromBody]User body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// create an account
        /// </summary>
        /// <remarks>Create an account by providing an email and a password</remarks>
        /// <param name="body"></param>
        /// <response code="200">Account successfully created</response>
        /// <response code="400">Something went wrong during registration</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/Stryge/Textual_RPG_engine/1.0.0/signin")]
        [ValidateModelState]
        [SwaggerOperation("SignIn")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Something went wrong during registration")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult SignIn([FromBody]User body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>route to test swagger codegen</remarks>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/Stryge/Textual_RPG_engine/1.0.0/test")]
        [ValidateModelState]
        [SwaggerOperation("Test")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "OK")]
        public virtual IActionResult Test()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            string exampleJson = null;
            exampleJson = "\"is OK\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<string>(exampleJson)
                        : default(string);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
